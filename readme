>Como um shell começa seus processos?
Startar processos é a principal função de um shell
Programar um shell é muito sobre saber como um processo funciona por 
debaixo dos panos. 
Tem 2 formas de startar processos em sistemas UNIX-based. o primeiro
é ser init. quando um OS unix inicia, seu kernel é carregado. Uma vez 
carregado e inicializado, o kernel starta apenas um processo, que se 
chama Init.
esse processo funciona por todo o tempo que o computador está ligado, e 
gerencia o carregamento do restante dos processos necessários para que 
seu computador seja útil.

Como a maioria dos programas não são Init, resta apenas uma maneira 
prática de iniciar os processos: a chamada de sistema fork(). 
Quando esta função é chamada, o sistema operacional duplica o processo 
e inicia a execução de ambos. O processo original é chamado de “pai” e 
o novo é chamado de “filho”. fork() retorna 0 para o processo filho e 
retorna ao pai o número de ID do processo (PID) de seu filho. 
Em essência, isso significa que a única maneira de iniciar novos 
processos é duplicando um já existente.

Isso pode parecer um problema. Tipicamente, quando voce quer rodar um novo 
processo, voce nao quer outra copia do mesmo programa - Voce quer rodar um
programa diferente. Isso é oque exec() system call faz. O OS para seu processo,
carrega um novo programa, e começa esse no lugar. Um processo nunca retorna de 
uma chamada exec() (a menos que haja um erro).

Com esses dois system calls, nos temos os blocks que constroem a maioria
dos programas que rodar no Unix. Primeiro, um processo existente se divide
em dois processos separados. Então, a child usa exec() para se substituir
por um novo programa. O processo pai pode continuar fazendo outras coisas
e pode até mesmo manter o controle sobre seus filhos, usando a chamada do sistema wait().
